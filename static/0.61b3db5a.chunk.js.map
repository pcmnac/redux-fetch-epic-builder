{"version":3,"sources":["webpack:///static/0.61b3db5a.chunk.js","webpack:///./README.md?27e7","webpack:///./README.md"],"names":["webpackJsonp","588","module","exports","__webpack_require__","React","createReactClass","PageRenderer","__esModule","default","WrappedPageRenderer","displayName","getInitialState","content","componentWillMount","render","createElement","Object","assign","this","props","state","__catalog_loader__","589"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GCFjC,GAAAC,GAAAD,EAAA,GACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,KAAAG,YACAA,GAAAC,aACAD,IAAAE,QAEA,IAAAC,GAAAJ,GACAK,YAAA,sBACAC,gBAAA,WACA,OAAgBC,QAAAT,EAAA,OAEhBU,mBAAA,aAUAC,OAAA,WACA,MAAAV,GAAAW,cAAAT,EAAAU,OAAAC,UAAiEC,KAAAC,OAAeP,QAAAM,KAAAE,MAAAR,aAGhFH,GAAAY,oBAAA,EACApB,EAAAC,QAAAO,GDUMa,IACA,SAAUrB,EAAQC,GEtCxBD,EAAAC,QAAA","file":"static/0.61b3db5a.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 588:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n    var React = __webpack_require__(6);\n    var createReactClass = __webpack_require__(32);\n    var PageRenderer = __webpack_require__(209).PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: __webpack_require__(589)};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (false) {\n          module.hot.accept(\"!!./node_modules/raw-loader/index.js!./README.md\", function() {\n            component.setState({\n              content: require(\"!!./node_modules/raw-loader/index.js!./README.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n/***/ }),\n\n/***/ 589:\n/***/ (function(module, exports) {\n\nmodule.exports = \"# react-fetch-epic-builder\\n\\nAn utilitary lib for build \\\"fetch actions\\\" and generic EPICs handled by redux-observable.\\n\\nFollow an example of use based on ducks structure.\\n\\n```javascript\\nimport { createBuilder, successType, errorType } from 'utils/epic-builder';\\nimport store from 'stores/configureStore';\\n\\nconst buildEpic = createBuilder({\\n    jwtGetter: () => store.getState().app.jwt,\\n});\\n\\n// action types\\nconst GET_COMMENTS = 'posts/GET_COMMENTS';\\nconst GET_COMMENTS_SUCCESS = successType(GET_COMMENTS);\\nconst GET_COMMENTS_ERROR = errorType(GET_COMMENTS);\\n\\nconst actionsType = {\\n    GET_COMMENTS,\\n    GET_COMMENTS_SUCCESS,\\n    GET_COMMENTS_ERROR,\\n}\\n\\n// reducer example\\nfunction reducer(state = {}, action) {\\n    switch (action.type) {\\n        case GET_COMMENTS_SUCCESS:\\n            return {\\n                ...state,\\n                comments: action.result.data,\\n            }\\n        case GET_COMMENTS_ERROR:\\n            return {\\n                ...state,\\n                comments: [],\\n            }\\n    }\\n\\n    return state;\\n}\\n\\n//action creators\\n\\n// get comments from a post\\nconst getComments = (id, page = 1) => ({\\n    type: GET_COMMENTS, // (required) action type\\n    host: 'http://myblog.com', // (optional, if a default was configured)\\n    path: `/posts/${id}/comments`, // (optional) destination path\\n    query: { // (optional) query parameter object\\n        page,\\n    },\\n})\\n\\nconst actionCreators = {\\n    getComments,\\n}\\n\\n// epics\\nconst epics = [\\n    buildEpic(GET_COMMENTS),\\n]\\n\\nexport default reducer;\\n\\nexport {\\n    actionsType,\\n    actionCreators,\\n    epics,\\n}\\n```\\n*posts.js*\\n\\n```javascript\\nimport { combineEpics } from 'redux-observable';\\nimport { epics as posts } from 'ducks/posts';\\n\\nconst rootEpic = combineEpics(...[\\n    ...posts,\\n]);\\n\\nexport default rootEpic;\\n```\\n*epics/index.js*\"\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/0.61b3db5a.chunk.js","\n    var React = require('react');\n    var createReactClass = require('create-react-class');\n    var PageRenderer = require('catalog').PageRenderer;\n    if (PageRenderer.__esModule) {\n      PageRenderer = PageRenderer.default;\n    }\n    var WrappedPageRenderer = createReactClass({\n      displayName: 'WrappedPageRenderer',\n      getInitialState: function() {\n        return {content: require(\"!!./node_modules/raw-loader/index.js!./README.md\")};\n      },\n      componentWillMount: function() {\n        var component = this;\n        if (module.hot) {\n          module.hot.accept(\"!!./node_modules/raw-loader/index.js!./README.md\", function() {\n            component.setState({\n              content: require(\"!!./node_modules/raw-loader/index.js!./README.md\")\n            })\n          })\n        }\n      },\n      render: function() {\n        return React.createElement(PageRenderer, Object.assign({}, this.props, {content: this.state.content}));\n      }\n    });\n    WrappedPageRenderer.__catalog_loader__ = true;\n    module.exports = WrappedPageRenderer;\n  \n\n\n//////////////////\n// WEBPACK FOOTER\n// ./README.md\n// module id = 588\n// module chunks = 0","module.exports = \"# react-fetch-epic-builder\\n\\nAn utilitary lib for build \\\"fetch actions\\\" and generic EPICs handled by redux-observable.\\n\\nFollow an example of use based on ducks structure.\\n\\n```javascript\\nimport { createBuilder, successType, errorType } from 'utils/epic-builder';\\nimport store from 'stores/configureStore';\\n\\nconst buildEpic = createBuilder({\\n    jwtGetter: () => store.getState().app.jwt,\\n});\\n\\n// action types\\nconst GET_COMMENTS = 'posts/GET_COMMENTS';\\nconst GET_COMMENTS_SUCCESS = successType(GET_COMMENTS);\\nconst GET_COMMENTS_ERROR = errorType(GET_COMMENTS);\\n\\nconst actionsType = {\\n    GET_COMMENTS,\\n    GET_COMMENTS_SUCCESS,\\n    GET_COMMENTS_ERROR,\\n}\\n\\n// reducer example\\nfunction reducer(state = {}, action) {\\n    switch (action.type) {\\n        case GET_COMMENTS_SUCCESS:\\n            return {\\n                ...state,\\n                comments: action.result.data,\\n            }\\n        case GET_COMMENTS_ERROR:\\n            return {\\n                ...state,\\n                comments: [],\\n            }\\n    }\\n\\n    return state;\\n}\\n\\n//action creators\\n\\n// get comments from a post\\nconst getComments = (id, page = 1) => ({\\n    type: GET_COMMENTS, // (required) action type\\n    host: 'http://myblog.com', // (optional, if a default was configured)\\n    path: `/posts/${id}/comments`, // (optional) destination path\\n    query: { // (optional) query parameter object\\n        page,\\n    },\\n})\\n\\nconst actionCreators = {\\n    getComments,\\n}\\n\\n// epics\\nconst epics = [\\n    buildEpic(GET_COMMENTS),\\n]\\n\\nexport default reducer;\\n\\nexport {\\n    actionsType,\\n    actionCreators,\\n    epics,\\n}\\n```\\n*posts.js*\\n\\n```javascript\\nimport { combineEpics } from 'redux-observable';\\nimport { epics as posts } from 'ducks/posts';\\n\\nconst rootEpic = combineEpics(...[\\n    ...posts,\\n]);\\n\\nexport default rootEpic;\\n```\\n*epics/index.js*\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/raw-loader!./README.md\n// module id = 589\n// module chunks = 0"],"sourceRoot":""}