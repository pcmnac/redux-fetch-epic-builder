webpackJsonp([0],{588:function(n,e,t){var o=t(6),r=t(32),s=t(209).PageRenderer;s.__esModule&&(s=s.default);var c=r({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:t(589)}},componentWillMount:function(){},render:function(){return o.createElement(s,Object.assign({},this.props,{content:this.state.content}))}});c.__catalog_loader__=!0,n.exports=c},589:function(n,e){n.exports="# react-fetch-epic-builder\n\nAn utilitary lib for build \"fetch actions\" and generic EPICs handled by redux-observable.\n\nFollow an example of use based on ducks structure.\n\n```javascript\nimport { createBuilder, successType, errorType } from 'utils/epic-builder';\nimport store from 'stores/configureStore';\n\nconst buildEpic = createBuilder({\n    jwtGetter: () => store.getState().app.jwt,\n});\n\n// action types\nconst GET_COMMENTS = 'posts/GET_COMMENTS';\nconst GET_COMMENTS_SUCCESS = successType(GET_COMMENTS);\nconst GET_COMMENTS_ERROR = errorType(GET_COMMENTS);\n\nconst actionsType = {\n    GET_COMMENTS,\n    GET_COMMENTS_SUCCESS,\n    GET_COMMENTS_ERROR,\n}\n\n// reducer example\nfunction reducer(state = {}, action) {\n    switch (action.type) {\n        case GET_COMMENTS_SUCCESS:\n            return {\n                ...state,\n                comments: action.result.data,\n            }\n        case GET_COMMENTS_ERROR:\n            return {\n                ...state,\n                comments: [],\n            }\n    }\n\n    return state;\n}\n\n//action creators\n\n// get comments from a post\nconst getComments = (id, page = 1) => ({\n    type: GET_COMMENTS, // (required) action type\n    host: 'http://myblog.com', // (optional, if a default was configured)\n    path: `/posts/${id}/comments`, // (optional) destination path\n    query: { // (optional) query parameter object\n        page,\n    },\n})\n\nconst actionCreators = {\n    getComments,\n}\n\n// epics\nconst epics = [\n    buildEpic(GET_COMMENTS),\n]\n\nexport default reducer;\n\nexport {\n    actionsType,\n    actionCreators,\n    epics,\n}\n```\n*posts.js*\n\n```javascript\nimport { combineEpics } from 'redux-observable';\nimport { epics as posts } from 'ducks/posts';\n\nconst rootEpic = combineEpics(...[\n    ...posts,\n]);\n\nexport default rootEpic;\n```\n*epics/index.js*"}});
//# sourceMappingURL=0.61b3db5a.chunk.js.map